/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#ifndef KEYMAP_DRAWER

#include "keys_de.h"

#endif

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define MAGIC 1
#define LOWER_RIGHT_PRESS 2
#define LOWER_LEFT_PRESS 3

/ {
    behaviors {
        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        kp_and_layer: kp_and_layer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            bindings = <&mo>, <&kp>;

            flavor = "balanced";
            quick-tap-ms = <150>;
            require-prior-idle-ms = <125>;
        };

        kp_and_kp: kp_and_kp {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            quick-tap-ms = <150>;
            require-prior-idle-ms = <125>;
        };

        hrm_l: hrm_l {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <16 28 29 30 40 41 42 55 56 57 58 59 60 61 62 73 74 75 76 77 78 79 72 5 6 17 18 19 31 32 43 44 45 63 7 8 9 20 21 33>;
            hold-trigger-on-release;
        };

        hrm_r: hrm_r {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 22 23 24 25 26 34 35 36 37 38 39 46 47 48 49 50 51 52 53 54 64 65 66 67 68 69 70 15 27 71>;
            hold-trigger-on-release;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        left_brace {
            bindings = <&kp DE_LEFT_BRACE>;
            key-positions = <36 37>;
        };

        right_brace {
            bindings = <&kp DE_RIGHT_BRACE>;
            key-positions = <37 38>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp F1          &kp F2  &kp F3         &kp F4          &kp F5                                                                                                                                                     &kp F6  &kp F7          &kp F8         &kp F9           &kp F10
&none           &kp N1  &kp N2         &kp N3          &kp N4     &kp N5                                                                                                                                  &kp N6  &kp N7  &kp N8          &kp N9         &kp N0           &kp DE_SZ
&kp TAB         &kp Q   &kp W          &kp E           &kp R      &kp T                                                                                                                                   &kp Y   &kp U   &kp I           &kp O          &kp P            &kp DE_U_UMLAUT
&kp ESC         &kp A   &hrm_l LALT S  &hrm_l LCTRL D  &kp F      &kp G                                                                                                                                   &kp H   &kp J   &hrm_r RCTRL K  &hrm_r RALT L  &kp DE_O_UMLAUT  &kp DE_A_UMLAUT
&kp DE_CARET    &kp Z   &kp X          &kp C           &kp V      &kp B   &kp LGUI           &kp CAPSLOCK                        &none    &none  &none                                &kp RGUI            &kp N   &kp M   &kp COMMA       &kp DOT        &kp DE_MINUS     &kp PG_UP
&magic MAGIC 0  &mo 3   &none          &kp LEFT        &kp RIGHT          &hrm_l LSHFT BSPC  &kp_and_layer LOWER_LEFT_PRESS DEL  &none    &none  &kp_and_layer LOWER_RIGHT_PRESS RET  &hrm_r RSHFT SPACE          &kp UP  &kp DOWN        &none          &mo 2            &kp PG_DN
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                       &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                               &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                     &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                     &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none           &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB    &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };

        lower_right_press {
            bindings = <
&kp C_BRI_DN   &kp C_BRI_UP          &none                    &none                     &none                                                                                                           &none       &none         &none         &none            &kp PAUSE_BREAK
&none          &none                 &kp F11                  &kp F12                   &none                &none                                                                 &none                &kp KP_NUM  &kp KP_EQUAL  &kp KP_SLASH  &kp KP_MULTIPLY  &kp PRINTSCREEN
&kp DE_DEGREE  &kp DE_DOUBLE_QUOTES  &kp DE_LEFT_BRACE        &kp DE_RIGHT_BRACE        &kp DE_SINGLE_QUOTE  &none                                                                 &none                &kp KP_N7   &kp KP_N8     &kp KP_N9     &kp KP_MINUS     &kp SCROLLLOCK
&none          &kp DE_UNDERSCORE     &kp DE_LEFT_PARENTHESIS  &kp DE_RIGHT_PARENTHESIS  &kp DE_DOLLAR        &none                                                                 &kp C_AL_CALCULATOR  &kp KP_N4   &kp KP_N5     &kp KP_N6     &kp KP_PLUS      &none
&none          &kp DE_LESS_THAN      &kp DE_LEFT_BRACKET      &kp DE_RIGHT_BRACKET      &kp DE_GREATER_THAN  &none  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PP      &none  &none  &none  &none                &kp KP_N1   &kp KP_N2     &kp KP_N3     &kp KP_ENTER     &none
&none          &none                 &none                    &none                     &kp DE_PERCENT              &kp C_MUTE    &kp C_PREV    &kp C_NEXT    &none  &none  &none                       &kp KP_N0   &kp KP_N0     &kp KP_DOT    &kp KP_ENTER     &none
            >;
        };

        lower_left_press {
            bindings = <
&none  &none  &none  &none  &none                                                            &none             &none               &none         &none         &none
&none  &none  &none  &none  &none  &none                                              &none  &none             &none               &none         &none         &none
&none  &none  &none  &none  &none  &none                                              &none  &kp DE_BACKSLASH  &kp DE_GRAVE        &kp DE_ACUTE  &kp DE_PLUS   &kp HOME
&none  &none  &none  &none  &none  &none                                              &none  &kp DE_SLASH      &kp DE_STAR         &kp DE_EQUAL  &kp DE_HASH   &kp END
&none  &none  &none  &none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &kp DE_PIPE       &kp DE_EXCLAMATION  &kp DE_QMARK  &kp DE_TILDE  &kp INSERT
&none  &none  &none  &none  &none         &none  &none  &none    &none  &none  &none         &kp DE_AMPERSAND  &none               &none         &none         &none
            >;
        };
    };
};
